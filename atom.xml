<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>神奇的战士</title>
  
  <subtitle>这个不辣～</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangshub.github.io/"/>
  <updated>2017-12-14T13:37:39.573Z</updated>
  <id>http://wangshub.github.io/</id>
  
  <author>
    <name>神奇的战士</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python：将图片转换成excel文档</title>
    <link href="http://wangshub.github.io/2017/12/14/image-to-excel/"/>
    <id>http://wangshub.github.io/2017/12/14/image-to-excel/</id>
    <published>2017-12-14T13:28:12.000Z</published>
    <updated>2017-12-14T13:37:39.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python：将图片转换成excel文档"><a href="#python：将图片转换成excel文档" class="headerlink" title="python：将图片转换成excel文档"></a>python：将图片转换成excel文档</h1><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://wx1.sinaimg.cn/large/c3a916a7gy1fmgmi7aqirj20dd09zmy2.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li>读取图像，获取图像每个像素点的RGB值；</li><li>根据每个像素点的RGB值设置excel每个方格的颜色值；</li><li>根据像素点的坐标，写入excel文件；</li><li>保存退出；</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> xlsxwriter</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_xy</span><span class="params">(row, col)</span>:</span></span><br><span class="line">    table = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line">    num1 = col / <span class="number">26</span></span><br><span class="line">    num2 = col % <span class="number">26</span></span><br><span class="line">    <span class="comment"># print num1, num2</span></span><br><span class="line">    <span class="keyword">if</span> num1 == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> table[num2 - <span class="number">1</span>] + str(row)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> table[num1<span class="number">-1</span>] + table[num2 - <span class="number">1</span>] + str(row)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    img = np.array(Image.open(<span class="string">'whale.jpeg'</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># plt.figure("whale")</span></span><br><span class="line">    <span class="comment"># plt.imshow(img)</span></span><br><span class="line">    <span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line">    rows, cols, dims = img.shape</span><br><span class="line">    <span class="keyword">print</span> img.shape  </span><br><span class="line">    <span class="keyword">print</span> img.dtype </span><br><span class="line">    <span class="keyword">print</span> img.size </span><br><span class="line">    <span class="keyword">print</span> type(img)</span><br><span class="line">    <span class="comment"># print img[188, 188, 0]</span></span><br><span class="line"></span><br><span class="line">    excel = xlsxwriter.Workbook(<span class="string">'image_excel.xlsx'</span>)</span><br><span class="line">    cellformat = excel.add_format(&#123;<span class="string">'bg_color'</span>: <span class="string">'#123456'</span>,</span><br><span class="line">                                   <span class="string">'font_color'</span>: <span class="string">'#654321'</span>&#125;)</span><br><span class="line">    worksheet1 = excel.add_worksheet()</span><br><span class="line"></span><br><span class="line">    data = []</span><br><span class="line">    color = [<span class="string">''</span>] * cols</span><br><span class="line">    cellcolor = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(rows):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(cols):</span><br><span class="line">            <span class="comment"># print hex(img[i, j, 0]), hex(img[i, j, 1]), hex(img[i, j, 2])</span></span><br><span class="line">            cellcolor = (hex(img[i, j, <span class="number">0</span>]) + hex(img[i, j, <span class="number">1</span>]) + hex(img[i, j, <span class="number">2</span>])).replace(<span class="string">'0x'</span>, <span class="string">''</span>)</span><br><span class="line">            <span class="comment"># print cellcolor</span></span><br><span class="line">           </span><br><span class="line">            cellformat = excel.add_format(&#123;<span class="string">'bg_color'</span>: <span class="string">'#'</span>+cellcolor, </span><br><span class="line">                                           <span class="string">'font_color'</span>: <span class="string">'#'</span>+cellcolor&#125;)</span><br><span class="line">           </span><br><span class="line">            <span class="comment"># cellformat = excel.add_format(&#123;'bg_color': '#C6EFCE', </span></span><br><span class="line">            <span class="comment">#                                'font_color': '#006100'&#125;)</span></span><br><span class="line">            </span><br><span class="line">            worksheet1.conditional_format(get_xy(i, j), &#123;<span class="string">'type'</span>: <span class="string">'cell'</span>,</span><br><span class="line">                                                        <span class="string">'criteria'</span>: <span class="string">'&lt;'</span>,</span><br><span class="line">                                                        <span class="string">'value'</span>: <span class="number">50</span>,</span><br><span class="line">                                                        <span class="string">'format'</span>: cellformat&#125;)</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># data.append(data_row)</span></span><br><span class="line">    excel.close()    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="comment"># print get_xy(133, 27)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python：将图片转换成excel文档&quot;&gt;&lt;a href=&quot;#python：将图片转换成excel文档&quot; class=&quot;headerlink&quot; title=&quot;python：将图片转换成excel文档&quot;&gt;&lt;/a&gt;python：将图片转换成excel文档&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wangshub.github.io/2017/12/14/hello-world/"/>
    <id>http://wangshub.github.io/2017/12/14/hello-world/</id>
    <published>2017-12-14T11:15:25.998Z</published>
    <updated>2017-12-14T11:15:25.998Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python check hosts update</title>
    <link href="http://wangshub.github.io/2017/07/20/python-check-hosts-update/"/>
    <id>http://wangshub.github.io/2017/07/20/python-check-hosts-update/</id>
    <published>2017-07-20T14:33:15.000Z</published>
    <updated>2017-07-20T14:45:58.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用Python检查-hosts-更新"><a href="#用Python检查-hosts-更新" class="headerlink" title="用Python检查 hosts 更新"></a>用Python检查 <em>hosts</em> 更新</h1><p>最近各种代理纷纷关闭，常见的翻墙方式就剩lantern和更改hosts的方式依旧坚挺，关注了一些更新hosts的git仓库，但是又不想登录网页查看原作者是否有更新。所以这种苦力活就让Python干好了。</p><h2 id="hosts地址"><a href="#hosts地址" class="headerlink" title="hosts地址"></a>hosts地址</h2><p>_hosts<em>info.py</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hosts_source = [<span class="string">"https://raw.githubusercontent.com/racaljk/hosts/master/hosts"</span>]</span><br></pre></td></tr></table></figure></p><h2 id="检查hosts是否有更新"><a href="#检查hosts是否有更新" class="headerlink" title="检查hosts是否有更新"></a>检查hosts是否有更新</h2><p>_check<em>hosts.py</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">from</span> .hosts_info <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> filecmp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hosts_download</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">'hosts'</span>):</span><br><span class="line">        hosts_name = <span class="string">'hosts_new'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        hosts_name = <span class="string">'hosts'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># <span class="doctag">todo:</span> overtime detection</span></span><br><span class="line">    f = urllib2.urlopen(hosts_source[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"downloading hosts"</span></span><br><span class="line">    <span class="keyword">with</span> open(hosts_name, <span class="string">"wb"</span>) <span class="keyword">as</span> code:</span><br><span class="line">       code.write(f.read())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_hosts_new</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    hosts_download()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'hosts'</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'oops, hosts not exists'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> os.path.exists(<span class="string">'hosts'</span>) <span class="keyword">and</span> (<span class="keyword">not</span> os.path.exists(<span class="string">'hosts_new'</span>)):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'first run, only one hosts file'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> os.path.exists(<span class="string">'hosts'</span>) <span class="keyword">and</span> (os.path.exists(<span class="string">'hosts_new'</span>)):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'compare hosts &amp; hosts_new'</span></span><br><span class="line">        diff_status = filecmp.cmp(<span class="string">'hosts'</span>, <span class="string">'hosts_new'</span>)</span><br><span class="line">        <span class="keyword">if</span> diff_status:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'same file'</span></span><br><span class="line">            os.remove(<span class="string">'hosts_new'</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'diff file'</span></span><br><span class="line">            os.remove(<span class="string">'hosts'</span>)</span><br><span class="line">            os.rename(<span class="string">'hosts_new'</span>, <span class="string">"hosts"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure></p><h2 id="主程序调用"><a href="#主程序调用" class="headerlink" title="主程序调用"></a>主程序调用</h2><p><em>main.py</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> check_hosts.check_hosts <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">diff_status = is_hosts_new()</span><br><span class="line"><span class="keyword">if</span> diff_status:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"new hosts !"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'code: '</span>,diff_status</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用Python检查-hosts-更新&quot;&gt;&lt;a href=&quot;#用Python检查-hosts-更新&quot; class=&quot;headerlink&quot; title=&quot;用Python检查 hosts 更新&quot;&gt;&lt;/a&gt;用Python检查 &lt;em&gt;hosts&lt;/em&gt; 更新&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Python" scheme="http://wangshub.github.io/categories/Python/"/>
    
      <category term="VPN" scheme="http://wangshub.github.io/categories/Python/VPN/"/>
    
    
      <category term="Python" scheme="http://wangshub.github.io/tags/Python/"/>
    
      <category term="VPN" scheme="http://wangshub.github.io/tags/VPN/"/>
    
  </entry>
  
  <entry>
    <title>python mail sender</title>
    <link href="http://wangshub.github.io/2017/07/20/python-mail-sender/"/>
    <id>http://wangshub.github.io/2017/07/20/python-mail-sender/</id>
    <published>2017-07-20T14:22:06.000Z</published>
    <updated>2017-07-20T14:30:11.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-发送邮件"><a href="#python-发送邮件" class="headerlink" title="python 发送邮件"></a>python 发送邮件</h1><h2 id="配置服务器和邮箱"><a href="#配置服务器和邮箱" class="headerlink" title="配置服务器和邮箱"></a>配置服务器和邮箱</h2><blockquote><p>mail_info.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mail_host = <span class="string">'smtp.yeah.net'</span></span><br><span class="line">mail_user = <span class="string">'mail_name'</span></span><br><span class="line">mail_pass = <span class="string">'mail_password'</span></span><br><span class="line"></span><br><span class="line">sender = <span class="string">'mail_name@yeah.net'</span></span><br><span class="line">receivers = [<span class="string">'target@mail.com'</span>]</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><blockquote><p>mail_trans.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .mail_info <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mail_text_send</span><span class="params">(title, text)</span>:</span></span><br><span class="line">    message = MIMEText(text, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'Subject'</span>] = title</span><br><span class="line">    message[<span class="string">'From'</span>] = sender</span><br><span class="line">    message[<span class="string">'To'</span>] = receivers[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        smtpObj = smtplib.SMTP()</span><br><span class="line">        <span class="comment"># connect host</span></span><br><span class="line">        smtpObj.connect(mail_host, <span class="number">25</span>)</span><br><span class="line">        <span class="comment"># login host</span></span><br><span class="line">        smtpObj.login(mail_user, mail_pass)</span><br><span class="line">        <span class="comment"># send</span></span><br><span class="line">        smtpObj.sendmail(sender, receivers, message.as_string())</span><br><span class="line">        <span class="comment"># quit</span></span><br><span class="line">        smtpObj.quit()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> smtplib.SMTPException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="主程序调用"><a href="#主程序调用" class="headerlink" title="主程序调用"></a>主程序调用</h2><blockquote><p>main.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mail_trans <span class="keyword">import</span> *</span><br><span class="line">mail_text_send(<span class="string">'title'</span>, <span class="string">'hello world!'</span>)</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-发送邮件&quot;&gt;&lt;a href=&quot;#python-发送邮件&quot; class=&quot;headerlink&quot; title=&quot;python 发送邮件&quot;&gt;&lt;/a&gt;python 发送邮件&lt;/h1&gt;&lt;h2 id=&quot;配置服务器和邮箱&quot;&gt;&lt;a href=&quot;#配置服务器和邮箱&quot;
      
    
    </summary>
    
      <category term="Python" scheme="http://wangshub.github.io/categories/Python/"/>
    
      <category term="Code" scheme="http://wangshub.github.io/categories/Python/Code/"/>
    
      <category term="Mail" scheme="http://wangshub.github.io/categories/Python/Code/Mail/"/>
    
    
      <category term="Code" scheme="http://wangshub.github.io/tags/Code/"/>
    
      <category term="Python" scheme="http://wangshub.github.io/tags/Python/"/>
    
      <category term="Mail" scheme="http://wangshub.github.io/tags/Mail/"/>
    
  </entry>
  
  <entry>
    <title>使用python备份博客图床图片</title>
    <link href="http://wangshub.github.io/2017/06/05/use-python-to-backup-markdown-images/"/>
    <id>http://wangshub.github.io/2017/06/05/use-python-to-backup-markdown-images/</id>
    <published>2017-06-05T15:09:29.000Z</published>
    <updated>2017-06-05T15:31:18.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>最近在写markdown文档的过程中,经常需要插入一些图片.因为托管博客的服务器空间有限,所以上传图片到图床再插入到markdown中.有时候又插入网上的图片,这些图片随时可能失效.导致我的博客网站显示图片错误.<br><br>所以花了一点时间,用python <em>正则匹配</em> markdown中图片链接,然后下载图片保存到本地文件夹<code>img</code>中.这样就不用担心图片失效啦,当我找到稳定的图床,可以随时把这些图片再上传更新,美滋滋~~~</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul><li style="list-style: none"><input type="checkbox" checked> <code>.md</code>文件自动搜索</li><li style="list-style: none"><input type="checkbox" checked> 正则匹配图片链接</li><li style="list-style: none"><input type="checkbox" checked> 爬取图片内容</li><li style="list-style: none"><input type="checkbox" checked> 保存文本到本地</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p><strong>读取文件</strong> =&gt; <strong>正则匹配</strong> =&gt; <strong>图片下载</strong> =&gt; <strong>保存本地</strong></p><h1 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h1><p>详细见我的github地址: www.github.com/wangshub</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(path, word)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">        fp = os.path.join(path, filename)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(fp) <span class="keyword">and</span> word <span class="keyword">in</span> filename:</span><br><span class="line">            <span class="keyword">print</span> fp</span><br><span class="line">            download(str(fp))</span><br><span class="line">        <span class="keyword">elif</span> os.path.isdir(fp):</span><br><span class="line">            search(fp, word)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    <span class="comment"># filename = "test"</span></span><br><span class="line">    name = file_path.split(<span class="string">u"/"</span>)</span><br><span class="line">    filename = name[<span class="number">-1</span>]</span><br><span class="line">    f_md = open(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># all text of md file</span></span><br><span class="line">    text = f_md.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># regex</span></span><br><span class="line">    img_reg = <span class="string">r'\!&#123;1&#125;\[(.*?)\]\((.*?)\)'</span></span><br><span class="line">    result = re.findall(<span class="string">'!\[(.*)\]\((.*)\)'</span>, text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(result)):</span><br><span class="line">        img_quote = result[i][<span class="number">0</span>]</span><br><span class="line">        img_url = result[i][<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># download img</span></span><br><span class="line">        request = urllib2.Request(img_url)</span><br><span class="line">        response = urllib2.urlopen(request)</span><br><span class="line">        img_contents = response.read()</span><br><span class="line">        <span class="comment"># img name spell</span></span><br><span class="line">        urlname = img_url.split(<span class="string">u"/"</span>)</span><br><span class="line">        img_name = filename + <span class="string">'_'</span> + \</span><br><span class="line">            str(i) + <span class="string">'_'</span> + img_quote + str(urlname[len(urlname) - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">print</span> img_name, <span class="string">'~~~'</span>, img_url</span><br><span class="line">        <span class="comment"># write to file</span></span><br><span class="line">        f_img = open(<span class="string">'img/'</span> + img_name, <span class="string">'wb'</span>)</span><br><span class="line">        f_img.write(img_contents)</span><br><span class="line">        f_img.close()</span><br><span class="line">    f_md.close()</span><br><span class="line"></span><br><span class="line">search(sys.argv[<span class="number">1</span>], <span class="string">'.md'</span>)</span><br></pre></td></tr></table></figure><h1 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h1><p><code>python md_image_bacup.py /path/to/your/file/</code></p><h1 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h1><blockquote><p>Author : <em>WangSong</em><br><br>E-mail : <em>easternslope@yeah.net</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;最近在写markdown文档的过程中,经常需要插入一些图片.因为托管博客的服务器空间有限,所以上传图片到
      
    
    </summary>
    
      <category term="python" scheme="http://wangshub.github.io/categories/python/"/>
    
      <category term="markdown" scheme="http://wangshub.github.io/categories/python/markdown/"/>
    
      <category term="code" scheme="http://wangshub.github.io/categories/python/markdown/code/"/>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
      <category term="code" scheme="http://wangshub.github.io/tags/code/"/>
    
      <category term="markdown" scheme="http://wangshub.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>从机sshfs访问主机文件系统</title>
    <link href="http://wangshub.github.io/2017/05/31/sshfs-mount-net-disk/"/>
    <id>http://wangshub.github.io/2017/05/31/sshfs-mount-net-disk/</id>
    <published>2017-05-31T13:16:00.000Z</published>
    <updated>2017-05-31T14:57:30.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>需要在PC主机(Linux)上编写代码,每次都要将代码拷贝到从机(Linux)上编译运行程序.这里用到<code>scp</code>命令 <code>scp -r /主机/文件 从机名@192.168.x.x:从机目录/</code>.利用<code>sshfs</code>可以直接在从机进行编译,省略拷贝步骤.</p><h1 id="系统结构框图"><a href="#系统结构框图" class="headerlink" title="系统结构框图"></a>系统结构框图</h1><p><strong>Linux 主机</strong> <em>&lt;=====&gt;</em> <strong>Linux 从机</strong></p><h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><ol><li><p>主机</p><ul><li><code>sudo apt-get install openssh-server</code></li><li><code>ifconfig -a</code>获取局域网内 <em>IP地址</em></li></ul></li><li><p>从机</p><ul><li><code>sudo apt-get install sshfs</code></li><li><code>sshfs -o idmap=user -o reconnect host_name@192.168.20.236:/path/to/your/workspace /path/to/your/workspace</code></li></ul></li><li><p>现在可以从从机开心地访问主机文件了</p></li></ol><blockquote><p><em>author</em> : Wangsong<br><br><em>mail</em> : easternslope@yeah.net</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;需要在PC主机(Linux)上编写代码,每次都要将代码拷贝到从机(Linux)上编译运行程序.这里用到&lt;
      
    
    </summary>
    
      <category term="linux" scheme="http://wangshub.github.io/categories/linux/"/>
    
      <category term="tool" scheme="http://wangshub.github.io/categories/linux/tool/"/>
    
    
      <category term="linux" scheme="http://wangshub.github.io/tags/linux/"/>
    
      <category term="tool" scheme="http://wangshub.github.io/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>python 数据结构之二叉搜索树</title>
    <link href="http://wangshub.github.io/2017/05/29/python-data-structure-BST/"/>
    <id>http://wangshub.github.io/2017/05/29/python-data-structure-BST/</id>
    <published>2017-05-29T15:06:12.000Z</published>
    <updated>2017-07-13T03:28:54.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉搜索树定义"><a href="#二叉搜索树定义" class="headerlink" title="二叉搜索树定义"></a>二叉搜索树定义</h1><p>一颗二叉搜索树是以二叉树来组织的,每个节点除了 <em>Key</em> 还包括 <em>左孩子</em>, <em>右孩子</em>, <em>父节点</em> 等信息. BST满足限制条件: <em>对于任意节点的X,他的 <strong>左子树中关键字最大值&lt;=X.key</strong> , <strong>右子树关键字最小值&gt;=X.key</strong></em> 这个关系表示如下<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://algs4.cs.princeton.edu/32bst/images/bst-anatomy.png" alt="二叉" title="">                </div>                <div class="image-caption">二叉</div>            </figure><br><br>根据上图定义,一个二叉搜索树的例子是<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://algs4.cs.princeton.edu/32bst/images/bst-subtree-count.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h1 id="二叉树操作"><a href="#二叉树操作" class="headerlink" title="二叉树操作"></a>二叉树操作</h1><ul><li>查询</li><li>插入</li><li>删除</li></ul><h2 id="查询-搜索"><a href="#查询-搜索" class="headerlink" title="查询(搜索)"></a>查询(搜索)</h2><p>二叉树搜索采用递归的方式来进行查询,根据二叉搜索树的定义: 左子树存储小值, 右子树存储大值,一个完整的二叉搜索示意图如下<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://algs4.cs.princeton.edu/32bst/images/bst-search.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><br>可以写成 <em>伪代码</em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TREE-SEARCH(x, k)</span><br><span class="line">  <span class="keyword">if</span> x == NULL  <span class="keyword">or</span> k == x.key</span><br><span class="line">    <span class="keyword">return</span> x  </span><br><span class="line">  <span class="keyword">if</span> k &lt; x.key</span><br><span class="line">    <span class="keyword">return</span> TREE-SEARCH(x.left)</span><br><span class="line">  <span class="keyword">if</span> k &gt; x.key</span><br><span class="line">    <span class="keyword">return</span> TREE-SEARCH(x.right)</span><br></pre></td></tr></table></figure><p>转换成python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get</span><span class="params">(self, key, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key &lt; node.key:</span><br><span class="line">            <span class="keyword">return</span> self._get(key, node.left)</span><br><span class="line">        <span class="keyword">elif</span> key &gt; node.key:</span><br><span class="line">            <span class="keyword">return</span> self._get(key, node.right)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> node.val</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return the value paired with 'key'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Worst Case Complexity: O(N)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Balanced Tree Complexity: O(lg N)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self._get(key, self.root)</span><br></pre></td></tr></table></figure><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>插入和删除比查询呢稍微复杂一些,因为该操作会引起二叉搜索树的大小变化,会改变动态集合的结构.插入呢又比删除稍微容易实现.插入分为两部</p><ul><li>查询插入节点</li><li>改变目标节点附近的数据结构</li></ul><p>插入过程示意图如下<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://algs4.cs.princeton.edu/32bst/images/bst-insert.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>相应的伪代码如下, 输入节点 <em>z</em> , <em>z.key = v</em>, <em>z.left = NULL</em>, <em>z.right = NULL</em>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">TREE-INSERT(T, x)</span><br><span class="line">  y = NULL</span><br><span class="line">  x = T.root   <span class="comment"># 从根节点开始</span></span><br><span class="line">  <span class="keyword">while</span> x != NULL</span><br><span class="line">    y = x      <span class="comment"># 保存上一节点</span></span><br><span class="line">    <span class="keyword">if</span> z.key &lt; x.key <span class="comment"># 往左</span></span><br><span class="line">      x = x.left</span><br><span class="line">    <span class="keyword">else</span>             <span class="comment"># 往右</span></span><br><span class="line">      x = x.right</span><br><span class="line"></span><br><span class="line">  z.p = y        <span class="comment"># 父节点</span></span><br><span class="line">  <span class="keyword">if</span> y == NULL   <span class="comment"># tree T 为空</span></span><br><span class="line">    T.root = z</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> z.key &lt; y.key</span><br><span class="line">    y.left = z</span><br><span class="line">  <span class="keyword">else</span> y.right = z</span><br></pre></td></tr></table></figure><p>程序的运行复杂度取决于二叉树的形状<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://algs4.cs.princeton.edu/32bst/images/bst-typical.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><br>插入的运行时间取决于二叉搜索树的<em>高度h</em>,程序的运行时间<em>O(h)</em> ,所以二叉树形状的好坏直接影响算法的运行时间.</p><p>python代码实现为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_put</span><span class="params">(self, key, val, node)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># If we hit the end of a branch, create a new node</span></span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> Node(key, val)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Follow left branch</span></span><br><span class="line">        <span class="keyword">if</span> key &lt; node.key:</span><br><span class="line">            node.left = self._put(key, val, node.left)</span><br><span class="line">        <span class="comment"># Follow right branch</span></span><br><span class="line">        <span class="keyword">elif</span> key &gt; node.key:</span><br><span class="line">            node.right = self._put(key, val, node.right)</span><br><span class="line">        <span class="comment"># Overwrite value</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            node.val = val</span><br><span class="line"></span><br><span class="line">        node.size_of_subtree = self._size(node.left) + self._size(node.right)+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> node</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, val)</span>:</span></span><br><span class="line">          <span class="string">"""</span></span><br><span class="line"><span class="string">        Add a new key-value pair.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Worst Case Complexity: O(N)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Balanced Tree Complexity: O(lg N)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root = self._put(key, val, self.root)</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>删除总共分为三种情况:</p><ul><li>如果删除节点x没有孩子,直接删除即可;</li><li>如果删除节点x有1个孩子,用孩子替换该节点位置;</li><li><p>如果删除节点x有2个孩子, 这个情况有些复杂.关键是要找到节点 <em>x的继承者</em> . 节点z的继承者在节点z的右子树中有最小的关键值.这种情况下的操作分为下面步骤:</p><ol><li>输入待删除的节点x 和 二叉搜索树T.</li><li>在节点x的右子树开始搜索:往右再往左找到最小值节点H;</li><li>H右孩子为H的父节点, H的左孩子为X的左孩子;</li></ol></li></ul><p>示意图如下,应该一目了然:<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://algs4.cs.princeton.edu/32bst/images/bst-delete.png" alt="](http://algs4.cs.princeton.edu/32bst/images/bst-deletemin.png) ![" title="">                </div>                <div class="image-caption">](http://algs4.cs.princeton.edu/32bst/images/bst-deletemin.png) ![</div>            </figure></p><p>根据上面的描述,删除的伪代码可以分为两部分:</p><ol><li><p>为了移动子树, 用一棵子树替换一棵子树,并成为双亲的孩子节点.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TRANSPLANT(T, u, v)</span><br><span class="line"><span class="keyword">if</span> u.p == NULL</span><br><span class="line">T.root = v</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> u = u.p.left</span><br><span class="line">u.p.left = v</span><br><span class="line"><span class="keyword">else</span> u.p.right = v</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> v!= NULL</span><br><span class="line">v.p = u.p</span><br></pre></td></tr></table></figure></li><li><p>根据第一步完成二叉搜索树的删除过程:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">TREE-DELETE(T, z)</span><br><span class="line"><span class="keyword">if</span> z.left = NULL</span><br><span class="line">TRANSPLANT(T, z, z.right)</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (z.right == NULL)</span><br><span class="line">TRANSPLANT(T, z, z.left)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">y = TREE-MINIMUM(z.right)</span><br><span class="line"><span class="keyword">if</span> y.p != z</span><br><span class="line">TRANSPLANT(T, y, y.right)</span><br><span class="line">y.right = z.right</span><br><span class="line">y.right.p = y</span><br><span class="line">TRANSPLANT(T, z, y)</span><br><span class="line">y.left = z.left</span><br><span class="line">y.left.p = y</span><br></pre></td></tr></table></figure><p>用python 实现如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_delete</span><span class="params">(self, key, node)</span>:</span></span><br><span class="line"> <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"> <span class="keyword">if</span> key &lt; node.key:</span><br><span class="line">     node.left = self._delete(key, node.left)</span><br><span class="line"> <span class="keyword">elif</span> key &gt; node.key:</span><br><span class="line">     node.right = self._delete(key, node.right)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">     <span class="keyword">if</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">         <span class="keyword">return</span> node.left</span><br><span class="line">     <span class="keyword">elif</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">         <span class="keyword">return</span> node.right</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         old_node = node</span><br><span class="line">         node = self._ceiling_node(key, node.right)</span><br><span class="line">         node.right = self._delete_min(old_node.right)</span><br><span class="line">         node.left = old_node.left</span><br><span class="line"> node.size_of_subtree = self._size(node.left) + self._size(node.right)+<span class="number">1</span></span><br><span class="line"> <span class="keyword">return</span> node</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_delete_min</span><span class="params">(self, node)</span>:</span></span><br><span class="line"> <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">     <span class="keyword">return</span> node.right</span><br><span class="line"></span><br><span class="line"> node.left = self._delete_min(node.left)</span><br><span class="line"> node.size_of_subtree = self._size(node.left) + self._size(node.right)+<span class="number">1</span></span><br><span class="line"> <span class="keyword">return</span> node</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_ceiling_node</span><span class="params">(self, key, node)</span>:</span></span><br><span class="line"> <span class="string">"""</span></span><br><span class="line"><span class="string"> Returns the node with the smallest key that is greater than or equal to</span></span><br><span class="line"><span class="string"> the given value 'key'</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line"> <span class="keyword">if</span> node <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> key &lt; node.key:</span><br><span class="line">     <span class="comment"># Ceiling is either in left subtree or is this node</span></span><br><span class="line">     attempt_in_left = self._ceiling_node(key, node.left)</span><br><span class="line">     <span class="keyword">if</span> attempt_in_left <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">         <span class="keyword">return</span> node</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="keyword">return</span> attempt_in_left</span><br><span class="line"> <span class="keyword">elif</span> key &gt; node.key:</span><br><span class="line">     <span class="comment"># Ceiling must be in right subtree</span></span><br><span class="line">     <span class="keyword">return</span> self._ceiling_node(key, node.right)</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">     <span class="comment"># Keys are equal so ceiling is node with this key</span></span><br><span class="line">     <span class="keyword">return</span> node</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li>&lt;&lt;算法导论第三版&gt;&gt;</li><li><a href="http://algs4.cs.princeton.edu/32bst/" target="_blank" rel="noopener">http://algs4.cs.princeton.edu/32bst/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉搜索树定义&quot;&gt;&lt;a href=&quot;#二叉搜索树定义&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树定义&quot;&gt;&lt;/a&gt;二叉搜索树定义&lt;/h1&gt;&lt;p&gt;一颗二叉搜索树是以二叉树来组织的,每个节点除了 &lt;em&gt;Key&lt;/em&gt; 还包括 &lt;em&gt;左孩子&lt;/
      
    
    </summary>
    
      <category term="python" scheme="http://wangshub.github.io/categories/python/"/>
    
      <category term="code" scheme="http://wangshub.github.io/categories/python/code/"/>
    
      <category term="algorithm" scheme="http://wangshub.github.io/categories/python/code/algorithm/"/>
    
    
      <category term="python" scheme="http://wangshub.github.io/tags/python/"/>
    
      <category term="code" scheme="http://wangshub.github.io/tags/code/"/>
    
      <category term="algorithm" scheme="http://wangshub.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>python的webrtc库实现语音端点检测</title>
    <link href="http://wangshub.github.io/2017/05/25/python-vad/"/>
    <id>http://wangshub.github.io/2017/05/25/python-vad/</id>
    <published>2017-05-25T13:47:56.000Z</published>
    <updated>2017-07-13T03:28:54.662Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚搭了博客<a href="thinkhard.tech">thinkhard.tech</a>,欢迎踩踩~</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>语音端点检测最早应用于电话传输和检测系统当中,用于通信信道的时间分配,提高传输线路的利用效率.端点检测属于语音处理系统的前端操作,在语音检测领域意义重大.<br>但是目前的语音端点检测,尤其是检测 <em>人声</em> 开始和结束的端点始终是属于技术难点,各家公司始终处于 <strong>能判断</strong>,但是不敢保证 <strong>判别准确性</strong> 的阶段.<br><img src="https://ooo.0o0.ooo/2017/05/25/5926ed7fcc2b3.png" alt="Screenshot from 2017-05-25 22-42-50.png"><br>现在基于云端语义库的聊天机器人层出不穷,其中最著名的当属amazon的 <strong>Alexa/Echo</strong> 智能音箱.<br><img src="https://ooo.0o0.ooo/2017/05/25/5926ee0cbc85b.jpg" alt="timg.jpg"></p><p>国内如雨后春笋般出现了各种搭载语音聊天的智能音箱(如前几天在知乎上广告的若琪机器人)和各类智能机器人产品.国内语音服务提供商主要面对中文语音服务,由于语音不像图像有分辨率等等较为客观的指标,很多时候凭主观判断,所以较难判断各家语音识别和合成技术的好坏.但是我个人认为,国内的中文语音服务和国外的英文语音服务,在某些方面已经有超越的趋势.<br><img src="https://ooo.0o0.ooo/2017/05/25/5926f2220cae2.jpg" alt="timg (1).jpg"></p><p>通常搭建机器人聊天系统主要包括以下三个方面:    </p><ul><li>语音转文字(ASR/STT)    </li><li>语义内容(NLU/NLP)    </li><li>文字转语音(TTS)</li></ul><h2 id="语音转文字-ASR-STT"><a href="#语音转文字-ASR-STT" class="headerlink" title="语音转文字(ASR/STT)"></a>语音转文字(ASR/STT)</h2><p>在将语音传给云端API之前,是本地前端的语音采集,这部分主要包括如下几个方面:</p><ul><li>麦克风降噪</li><li>声源定位</li><li>回声消除</li><li>唤醒词</li><li>语音端点检测</li><li>音频格式压缩    </li></ul><a id="more"></a><h2 id="python-端点检测"><a href="#python-端点检测" class="headerlink" title="python 端点检测"></a>python 端点检测</h2><p>由于实际应用中,单纯依靠能量检测特征检测等方法很难判断人声说话的起始点,所以市面上大多数的语音产品都是使用唤醒词判断语音起始.另外加上声音回路,还可以做语音打断.这样的交互方式可能有些傻,每次必须喊一下 <em>唤醒词</em> 才能继续聊天.这种方式聊多了,个人感觉会嘴巴疼:-O .现在github上有snowboy唤醒词的开源库,大家可以登录snowboy官网训练自己的唤醒词模型.</p><ul><li>Kitt-AI : <a href="https://github.com/Kitt-AI/snowboy" target="_blank" rel="noopener">Snowboy</a></li><li>Sensory : <a href="http://www.sensory.com/" target="_blank" rel="noopener">Sensory</a>        </li></ul><p>考虑到用唤醒词嘴巴会累,所以大致调研了一下,python拥有丰富的库,直接import就能食用.这种方式容易受强噪声干扰,适合一个人在家玩玩.</p><ul><li>pyaudio: <code>pip install pyaudio</code> 可以从设备节点读取原始音频流数据,音频编码是PCM格式;</li><li>webrtcvad: <code>pip install webrtcvad</code> 检测判断一组语音数据是否为空语音;<br>当检测到持续时间长度 <em>T1</em> vad检测都有语音活动,可以判定为语音起始;<br>当检测到持续时间长度 <em>T2</em> vad检测都没有有语音活动,可以判定为语音结束;        </li></ul><p>完整程序代码可以从我的<a href="https://github.com/wangshub/python-vad" target="_blank" rel="noopener">github</a>下载<br>程序很简单,相信看一会儿就明白了</p><pre><code class="python"><span class="string">'''</span><span class="string">Requirements:</span><span class="string">+ pyaudio - `pip install pyaudio`</span><span class="string">+ py-webrtcvad - `pip install webrtcvad`</span><span class="string">'''</span><span class="keyword">import</span> webrtcvad<span class="keyword">import</span> collections<span class="keyword">import</span> sys<span class="keyword">import</span> signal<span class="keyword">import</span> pyaudio<span class="keyword">from</span> array <span class="keyword">import</span> array<span class="keyword">from</span> struct <span class="keyword">import</span> pack<span class="keyword">import</span> wave<span class="keyword">import</span> timeFORMAT = pyaudio.paInt16CHANNELS = <span class="number">1</span>RATE = <span class="number">16000</span>CHUNK_DURATION_MS = <span class="number">30</span>       <span class="comment"># supports 10, 20 and 30 (ms)</span>PADDING_DURATION_MS = <span class="number">1500</span>   <span class="comment"># 1 sec jugement</span>CHUNK_SIZE = int(RATE * CHUNK_DURATION_MS / <span class="number">1000</span>)  <span class="comment"># chunk to read</span>CHUNK_BYTES = CHUNK_SIZE * <span class="number">2</span>  <span class="comment"># 16bit = 2 bytes, PCM</span>NUM_PADDING_CHUNKS = int(PADDING_DURATION_MS / CHUNK_DURATION_MS)<span class="comment"># NUM_WINDOW_CHUNKS = int(240 / CHUNK_DURATION_MS)</span>NUM_WINDOW_CHUNKS = int(<span class="number">400</span> / CHUNK_DURATION_MS)  <span class="comment"># 400 ms/ 30ms  ge</span>NUM_WINDOW_CHUNKS_END = NUM_WINDOW_CHUNKS * <span class="number">2</span>START_OFFSET = int(NUM_WINDOW_CHUNKS * CHUNK_DURATION_MS * <span class="number">0.5</span> * RATE)vad = webrtcvad.Vad(<span class="number">1</span>)pa = pyaudio.PyAudio()stream = pa.open(format=FORMAT,                 channels=CHANNELS,                 rate=RATE,                 input=<span class="keyword">True</span>,                 start=<span class="keyword">False</span>,                 <span class="comment"># input_device_index=2,</span>                 frames_per_buffer=CHUNK_SIZE)got_a_sentence = <span class="keyword">False</span>leave = <span class="keyword">False</span><span class="function"><span class="keyword">def</span> <span class="title">handle_int</span><span class="params">(sig, chunk)</span>:</span>    <span class="keyword">global</span> leave, got_a_sentence    leave = <span class="keyword">True</span>    got_a_sentence = <span class="keyword">True</span><span class="function"><span class="keyword">def</span> <span class="title">record_to_file</span><span class="params">(path, data, sample_width)</span>:</span>    <span class="string">"Records from the microphone and outputs the resulting data to 'path'"</span>    <span class="comment"># sample_width, data = record()</span>    data = pack(<span class="string">'&lt;'</span> + (<span class="string">'h'</span> * len(data)), *data)    wf = wave.open(path, <span class="string">'wb'</span>)    wf.setnchannels(<span class="number">1</span>)    wf.setsampwidth(sample_width)    wf.setframerate(RATE)    wf.writeframes(data)    wf.close()<span class="function"><span class="keyword">def</span> <span class="title">normalize</span><span class="params">(snd_data)</span>:</span>    <span class="string">"Average the volume out"</span>    MAXIMUM = <span class="number">32767</span>  <span class="comment"># 16384</span>    times = float(MAXIMUM) / max(abs(i) <span class="keyword">for</span> i <span class="keyword">in</span> snd_data)    r = array(<span class="string">'h'</span>)    <span class="keyword">for</span> i <span class="keyword">in</span> snd_data:        r.append(int(i * times))    <span class="keyword">return</span> rsignal.signal(signal.SIGINT, handle_int)<span class="keyword">while</span> <span class="keyword">not</span> leave:    ring_buffer = collections.deque(maxlen=NUM_PADDING_CHUNKS)    triggered = <span class="keyword">False</span>    voiced_frames = []    ring_buffer_flags = [<span class="number">0</span>] * NUM_WINDOW_CHUNKS    ring_buffer_index = <span class="number">0</span>    ring_buffer_flags_end = [<span class="number">0</span>] * NUM_WINDOW_CHUNKS_END    ring_buffer_index_end = <span class="number">0</span>    buffer_in = <span class="string">''</span>    <span class="comment"># WangS</span>    raw_data = array(<span class="string">'h'</span>)    index = <span class="number">0</span>    start_point = <span class="number">0</span>    StartTime = time.time()    print(<span class="string">"* recording: "</span>)    stream.start_stream()    <span class="keyword">while</span> <span class="keyword">not</span> got_a_sentence <span class="keyword">and</span> <span class="keyword">not</span> leave:        chunk = stream.read(CHUNK_SIZE)        <span class="comment"># add WangS</span>        raw_data.extend(array(<span class="string">'h'</span>, chunk))        index += CHUNK_SIZE        TimeUse = time.time() - StartTime        active = vad.is_speech(chunk, RATE)        sys.stdout.write(<span class="string">'1'</span> <span class="keyword">if</span> active <span class="keyword">else</span> <span class="string">'_'</span>)        ring_buffer_flags[ring_buffer_index] = <span class="number">1</span> <span class="keyword">if</span> active <span class="keyword">else</span> <span class="number">0</span>        ring_buffer_index += <span class="number">1</span>        ring_buffer_index %= NUM_WINDOW_CHUNKS        ring_buffer_flags_end[ring_buffer_index_end] = <span class="number">1</span> <span class="keyword">if</span> active <span class="keyword">else</span> <span class="number">0</span>        ring_buffer_index_end += <span class="number">1</span>        ring_buffer_index_end %= NUM_WINDOW_CHUNKS_END        <span class="comment"># start point detection</span>        <span class="keyword">if</span> <span class="keyword">not</span> triggered:            ring_buffer.append(chunk)            num_voiced = sum(ring_buffer_flags)            <span class="keyword">if</span> num_voiced &gt; <span class="number">0.8</span> * NUM_WINDOW_CHUNKS:                sys.stdout.write(<span class="string">' Open '</span>)                triggered = <span class="keyword">True</span>                start_point = index - CHUNK_SIZE * <span class="number">20</span>  <span class="comment"># start point</span>                <span class="comment"># voiced_frames.extend(ring_buffer)</span>                ring_buffer.clear()        <span class="comment"># end point detection</span>        <span class="keyword">else</span>:            <span class="comment"># voiced_frames.append(chunk)</span>            ring_buffer.append(chunk)            num_unvoiced = NUM_WINDOW_CHUNKS_END - sum(ring_buffer_flags_end)            <span class="keyword">if</span> num_unvoiced &gt; <span class="number">0.90</span> * NUM_WINDOW_CHUNKS_END <span class="keyword">or</span> TimeUse &gt; <span class="number">10</span>:                sys.stdout.write(<span class="string">' Close '</span>)                triggered = <span class="keyword">False</span>                got_a_sentence = <span class="keyword">True</span>        sys.stdout.flush()    sys.stdout.write(<span class="string">'\n'</span>)    <span class="comment"># data = b''.join(voiced_frames)</span>    stream.stop_stream()    print(<span class="string">"* done recording"</span>)    got_a_sentence = <span class="keyword">False</span>    <span class="comment"># write to file</span>    raw_data.reverse()    <span class="keyword">for</span> index <span class="keyword">in</span> range(start_point):        raw_data.pop()    raw_data.reverse()    raw_data = normalize(raw_data)    record_to_file(<span class="string">"recording.wav"</span>, raw_data, <span class="number">2</span>)    leave = <span class="keyword">True</span>stream.close()</code></pre><p>程序运行方式<code>sudo python vad.py</code><br>qrcode_for_gh_3586401957c4_258.jpg     Remove</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚搭了博客&lt;a href=&quot;thinkhard.tech&quot;&gt;thinkhard.tech&lt;/a&gt;,欢迎踩踩~&lt;/p&gt;
&lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;语音端点检测最早应用于电话传输和检测系统当中,用于通信信道的时间分配,提高传输线路的利用效率.端点检测属于语音处理系统的前端操作,在语音检测领域意义重大.&lt;br&gt;但是目前的语音端点检测,尤其是检测 &lt;em&gt;人声&lt;/em&gt; 开始和结束的端点始终是属于技术难点,各家公司始终处于 &lt;strong&gt;能判断&lt;/strong&gt;,但是不敢保证 &lt;strong&gt;判别准确性&lt;/strong&gt; 的阶段.&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/25/5926ed7fcc2b3.png&quot; alt=&quot;Screenshot from 2017-05-25 22-42-50.png&quot;&gt;&lt;br&gt;现在基于云端语义库的聊天机器人层出不穷,其中最著名的当属amazon的 &lt;strong&gt;Alexa/Echo&lt;/strong&gt; 智能音箱.&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/25/5926ee0cbc85b.jpg&quot; alt=&quot;timg.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;国内如雨后春笋般出现了各种搭载语音聊天的智能音箱(如前几天在知乎上广告的若琪机器人)和各类智能机器人产品.国内语音服务提供商主要面对中文语音服务,由于语音不像图像有分辨率等等较为客观的指标,很多时候凭主观判断,所以较难判断各家语音识别和合成技术的好坏.但是我个人认为,国内的中文语音服务和国外的英文语音服务,在某些方面已经有超越的趋势.&lt;br&gt;&lt;img src=&quot;https://ooo.0o0.ooo/2017/05/25/5926f2220cae2.jpg&quot; alt=&quot;timg (1).jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;通常搭建机器人聊天系统主要包括以下三个方面:    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语音转文字(ASR/STT)    &lt;/li&gt;
&lt;li&gt;语义内容(NLU/NLP)    &lt;/li&gt;
&lt;li&gt;文字转语音(TTS)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;语音转文字-ASR-STT&quot;&gt;&lt;a href=&quot;#语音转文字-ASR-STT&quot; class=&quot;headerlink&quot; title=&quot;语音转文字(ASR/STT)&quot;&gt;&lt;/a&gt;语音转文字(ASR/STT)&lt;/h2&gt;&lt;p&gt;在将语音传给云端API之前,是本地前端的语音采集,这部分主要包括如下几个方面:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;麦克风降噪&lt;/li&gt;
&lt;li&gt;声源定位&lt;/li&gt;
&lt;li&gt;回声消除&lt;/li&gt;
&lt;li&gt;唤醒词&lt;/li&gt;
&lt;li&gt;语音端点检测&lt;/li&gt;
&lt;li&gt;音频格式压缩    &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://wangshub.github.io/categories/Python/"/>
    
      <category term="Code" scheme="http://wangshub.github.io/categories/Python/Code/"/>
    
    
      <category term="Code" scheme="http://wangshub.github.io/tags/Code/"/>
    
  </entry>
  
  <entry>
    <title>Atom editor</title>
    <link href="http://wangshub.github.io/2017/05/25/Atom-editor/"/>
    <id>http://wangshub.github.io/2017/05/25/Atom-editor/</id>
    <published>2017-05-25T13:27:42.000Z</published>
    <updated>2017-07-13T03:28:54.652Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.clker.com/cliparts/3/8/9/1/1195436863389690204logomancer_Atom_Model.svg.hi.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>    <p>网上一直存在着vim和emacs两大阵营，两边的拥护者把这两个编辑器说的神乎其神。私以为，只是工具而已，对个人来说好用就行。Atom使用下来，我的感受就是</p><blockquote><ul><li>易安装，上手容易</li><li>插件安装方便</li><li>配置可备份</li></ul></blockquote><h1 id="Atom的安装"><a href="#Atom的安装" class="headerlink" title="Atom的安装"></a>Atom的安装</h1><p>我的系统是ubuntu16.04,直接<a href="atom.io">官网下载</a><code>*.deb</code>安装包，运行<code>dpkg -i atom.deb</code>.</p><h1 id="Atom插件"><a href="#Atom插件" class="headerlink" title="Atom插件"></a>Atom插件</h1><p>Atom下的插件安装十分便捷，在<code>install a package</code>下就能搜索安装。但是<code>GUI</code>的安装方式常常会安装失败，建议终端使用<code>apm install PackageName</code>安装插件。下面是我安装的一些插件：</p><ol><li><code>highlight-selected</code> 代码高亮插件；</li><li><code>terminal-fusion</code>Atom下的终端插件，强烈推荐，再也不用切换屏幕运行终端程序了；</li><li><code>simplified-chinese-menu</code>：简体中文插件；</li><li>待补充。。。</li></ol><h1 id="Atom配置"><a href="#Atom配置" class="headerlink" title="Atom配置"></a>Atom配置</h1><p>Atom自带的插件就能满足基本的日常需求，我能记起来的配置</p><ul><li><code>Markdown</code>文件预览：快捷键<code>Ctl-Shift-m</code>；</li><li>文件树，快捷键：<code>ctrl-\</code>；</li><li>文件查找：<code>ctrl-F</code>当前buffer中查找，<code>ctrl-shift-f</code>当前工程中查找；</li><li>代码跳转：首先首先<code>ctrl-alt-g</code>生成<code>.tags</code>文件，选中待跳转的函数，<code>ctrl-shift-r</code>完成跳转；</li><li><code>alt</code>键隐藏菜单栏，对于笔记本太有用了，整个界面也变得清爽；</li></ul><h1 id="Atom备份"><a href="#Atom备份" class="headerlink" title="Atom备份"></a>Atom备份</h1><p>经常在windows和Linux下进行切换，对于我常常作死把系统搞崩，所以需要备份Atom编辑器的配置，和<code>emacs</code>类似，可以将配置<code>～/.atom/</code>文件目录上传github,新装Atom的时候直接clone下来就好，我的配置github地址在<a href="https://github.com/wangshub/.atom.git" target="_blank" rel="noopener">这里</a></p><p>最后，上一张我的Atom效果图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ooo.0o0.ooo/2017/05/25/5926dc8d83d5c.png" alt="Screenshot from 2017-05-25 21-29-45.png" title="">                </div>                <div class="image-caption">Screenshot from 2017-05-25 21-29-45.png</div>            </figure></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://www.clker.com/cliparts/3/8/9/1/1195436863389690204logomancer_Atom_Model.svg.hi.png&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;    
&lt;p&gt;网上一直存在着vim和emacs两大阵营，两边的拥护者把这两个编辑器说的神乎其神。私以为，只是工具而已，对个人来说好用就行。Atom使用下来，我的感受就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;易安装，上手容易&lt;/li&gt;
&lt;li&gt;插件安装方便&lt;/li&gt;
&lt;li&gt;配置可备份&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Atom的安装&quot;&gt;&lt;a href=&quot;#Atom的安装&quot; class=&quot;headerlink&quot; title=&quot;Atom的安装&quot;&gt;&lt;/a&gt;Atom的安装&lt;/h1&gt;&lt;p&gt;我的系统是ubuntu16.04,直接&lt;a href=&quot;atom.io&quot;&gt;官网下载&lt;/a&gt;&lt;code&gt;*.deb&lt;/code&gt;安装包，运行&lt;code&gt;dpkg -i atom.deb&lt;/code&gt;.&lt;/p&gt;
&lt;h1 id=&quot;Atom插件&quot;&gt;&lt;a href=&quot;#Atom插件&quot; class=&quot;headerlink&quot; title=&quot;Atom插件&quot;&gt;&lt;/a&gt;Atom插件&lt;/h1&gt;&lt;p&gt;Atom下的插件安装十分便捷，在&lt;code&gt;install a package&lt;/code&gt;下就能搜索安装。但是&lt;code&gt;GUI&lt;/code&gt;的安装方式常常会安装失败，建议终端使用&lt;code&gt;apm install PackageName&lt;/code&gt;安装插件。下面是我安装的一些插件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;highlight-selected&lt;/code&gt; 代码高亮插件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;terminal-fusion&lt;/code&gt;Atom下的终端插件，强烈推荐，再也不用切换屏幕运行终端程序了；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;simplified-chinese-menu&lt;/code&gt;：简体中文插件；&lt;/li&gt;
&lt;li&gt;待补充。。。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Atom配置&quot;&gt;&lt;a href=&quot;#Atom配置&quot; class=&quot;headerlink&quot; title=&quot;Atom配置&quot;&gt;&lt;/a&gt;Atom配置&lt;/h1&gt;&lt;p&gt;Atom自带的插件就能满足基本的日常需求，我能记起来的配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Markdown&lt;/code&gt;文件预览：快捷键&lt;code&gt;Ctl-Shift-m&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;文件树，快捷键：&lt;code&gt;ctrl-\&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;文件查找：&lt;code&gt;ctrl-F&lt;/code&gt;当前buffer中查找，&lt;code&gt;ctrl-shift-f&lt;/code&gt;当前工程中查找；&lt;/li&gt;
&lt;li&gt;代码跳转：首先首先&lt;code&gt;ctrl-alt-g&lt;/code&gt;生成&lt;code&gt;.tags&lt;/code&gt;文件，选中待跳转的函数，&lt;code&gt;ctrl-shift-r&lt;/code&gt;完成跳转；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alt&lt;/code&gt;键隐藏菜单栏，对于笔记本太有用了，整个界面也变得清爽；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Atom备份&quot;&gt;&lt;a href=&quot;#Atom备份&quot; class=&quot;headerlink&quot; title=&quot;Atom备份&quot;&gt;&lt;/a&gt;Atom备份&lt;/h1&gt;&lt;p&gt;经常在windows和Linux下进行切换，对于我常常作死把系统搞崩，所以需要备份Atom编辑器的配置，和&lt;code&gt;emacs&lt;/code&gt;类似，可以将配置&lt;code&gt;～/.atom/&lt;/code&gt;文件目录上传github,新装Atom的时候直接clone下来就好，我的配置github地址在&lt;a href=&quot;https://github.com/wangshub/.atom.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后，上一张我的Atom效果图&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://ooo.0o0.ooo/2017/05/25/5926dc8d83d5c.png&quot; alt=&quot;Screenshot from 2017-05-25 21-29-45.png&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;Screenshot from 2017-05-25 21-29-45.png&lt;/div&gt;
            &lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tool" scheme="http://wangshub.github.io/categories/Tool/"/>
    
      <category term="Linux" scheme="http://wangshub.github.io/categories/Tool/Linux/"/>
    
    
      <category term="Editor" scheme="http://wangshub.github.io/tags/Editor/"/>
    
  </entry>
  
  <entry>
    <title>Cmake 模板</title>
    <link href="http://wangshub.github.io/2017/05/25/Cmake-tutorial/"/>
    <id>http://wangshub.github.io/2017/05/25/Cmake-tutorial/</id>
    <published>2017-05-24T16:03:34.000Z</published>
    <updated>2017-07-13T03:28:54.652Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://ooo.0o0.ooo/2017/05/25/5925af646160e.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><a id="more"></a><p>由于之前的代码Cmake写的比较混乱，库链接的不规范，今天花了一些时间，重写Cmakelist.txt，方便后来的开发。可以根据我的模板开始进行C/C++的项目开发.主要分下面几个方面</p><blockquote><ul><li>更新CMakeList.txt文件</li><li>改变头文件位置，索引文件夹</li><li>上传新的gitlab</li></ul></blockquote><h2 id="CMakeList-txt模板"><a href="#CMakeList-txt模板" class="headerlink" title="CMakeList.txt模板"></a>CMakeList.txt模板</h2><h4 id="全局CMakeList-txt文件"><a href="#全局CMakeList-txt文件" class="headerlink" title="全局CMakeList.txt文件"></a>全局CMakeList.txt文件</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CMake 最低版本号要求</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span> (VERSION <span class="number">2.8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 项目信息</span></span><br><span class="line"><span class="keyword">project</span> (aelos1s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sys dir</span></span><br><span class="line"><span class="keyword">find_package</span> (Threads)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找目录下的所有源文件</span></span><br><span class="line"><span class="comment"># 并将名称保存到 DIR_SRCS 变量</span></span><br><span class="line"><span class="keyword">aux_source_directory</span>(. DIR_SRCS)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 math 子目录</span></span><br><span class="line"><span class="keyword">add_subdirectory</span>(math)</span><br><span class="line"><span class="keyword">add_subdirectory</span>(lib)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定生成目标</span></span><br><span class="line"><span class="keyword">add_executable</span>(aelos <span class="variable">$&#123;DIR_SRCS&#125;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加链接库</span></span><br><span class="line"><span class="comment"># 生成链接库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(aelos aeloslib)</span><br><span class="line"><span class="comment"># 多线程链接库</span></span><br><span class="line"><span class="keyword">target_link_libraries</span> (aelos <span class="variable">$&#123;CMAKE_THREAD_LIBS_INIT&#125;</span>)</span><br></pre></td></tr></table></figure><h4 id="头文件库CMakeList-txt文件"><a href="#头文件库CMakeList-txt文件" class="headerlink" title="头文件库CMakeList.txt文件"></a>头文件库CMakeList.txt文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查找当前目录下的所有源文件</span><br><span class="line"># 并将名称保存到 DIR_LIB_SRCS 变量</span><br><span class="line">aux_source_directory(. DIR_LIB_SRCS)</span><br><span class="line"></span><br><span class="line"># 指定生成 aeloslib 链接库</span><br><span class="line">add_library (aeloslib $&#123;DIR_LIB_SRCS&#125;)</span><br></pre></td></tr></table></figure><h4 id="工程目录结构"><a href="#工程目录结构" class="headerlink" title="工程目录结构"></a>工程目录结构</h4><pre><code>the file structure is   |----main.cpp    #主程序    |----lib/        #*.cpp and *.h       |----build/      #可执行文件生成文件夹</code></pre><h4 id="工程参考模板的github地址"><a href="#工程参考模板的github地址" class="headerlink" title="工程参考模板的github地址"></a>工程参考模板的github地址</h4><blockquote><p><a href="https://github.com/wangshub/cmake" target="_blank" rel="noopener">https://github.com/wangshub/cmake</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;https://ooo.0o0.ooo/2017/05/25/5925af646160e.png&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://wangshub.github.io/categories/Programming/"/>
    
      <category term="Linux" scheme="http://wangshub.github.io/categories/Programming/Linux/"/>
    
      <category term="c/c++" scheme="http://wangshub.github.io/categories/Programming/Linux/c-c/"/>
    
    
      <category term="Code" scheme="http://wangshub.github.io/tags/Code/"/>
    
      <category term="Linux" scheme="http://wangshub.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
